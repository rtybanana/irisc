# Grammar for a simple ARMv7 assembly language in Extended BNF with some added conventions for simplicity
#   1.  {<expr>}+   indicates exactly one or more <expr>
#   2.  {<expr>}n   indicates up to n inclusive <expr>, where n > 1
#   3.  {<expr>}n+  indicates between one and n inclusive, where n > 1

<program>         ::=   [<data>] <text>
<data>            ::=   '.data' {<declaration>}+
<text>            ::=   '.text' <label> <instruction> {<label> | <instruction>}

<declaration>     ::=   <label> <type> <number>
<label>           ::=   <letter> {'_' | <letter>}+ ':'
<type>            ::=   '.asciz' | '.word' | '.skip'
<instruction>     ::=   <bi-operand> | <tri-operand> | <load/store> | <shift-op>

<bi-operand>      ::=   ('mov' | 'cmp')[<condition>] <register>',' <flex-operand>
<tri-operand>     ::=   ('add' | 'sub' | 'adc' | 'sbc' | 'rsb' | 'rsc')[<condition>] <register>',' <register>',' <flex-operand>
<load/store>      ::=   ('ldr' | 'str')[<size>][<condition>] <register>',' (<post-index> | <pre-index> | <variable>)
<shift-op>        ::=   ('lsl' | 'lsr' | 'ror' | 'asr')[<condition>] <register>',' <register>',' <reg-shift>

<variable>        ::=   '=' <letter> {'_' | <letter>}+                                          # pseudo instruction to access addresses of variables declared in .data
<post-index>      ::=   '[' <register> '],' (<immediate> | <reg-shift>)
<pre-index>       ::=   '[' <register> [',' (<immediate> | <reg-shift>)] ']' ['!']              # '!' denotes pre-index updating

<register>        ::=   'r'(<dec> | '10' | '11' | '12')                                         # numbers 0-12 inclusive
<flex-operand>    ::=   <immediate> | <reg-shift>
<reg-shift>       ::=   <register> [',' <shift>]
<shift>           ::=   ('lsl' | 'lsr' | 'ror' | 'asr') <immediate>
<immediate>       ::=   '#'(<decimal> | <hexadecimal> | <octal> | <binary>)
<condition>       ::=   'eq' | 'ne' | 'lt' | 'gt' | 'le' | 'ge'
<size>            ::=   'b' | 'sb' | 'h' | 'sh'

<hexadecimal>     ::=   '0x'{<hex>}2+                                                           # '0x' followed by up to 2 hex symbols e.g. 0x3F
<decimal>         ::=   ['0d'](                                                                 # '0d' (optional) followed by decimal numbers 0-255 inclusive
                          ['1']{<dec>}2+ | 
                          ('2'('0' | '1' | '2' | '3' | '4')<dec>) | 
                          '25'('0' | '1' | '2' | '3' | '4' | '5')
                        )
<octal>           ::=   '0'{<oct>}4+                                                            # '0' followed by up to 4 octal digits e.g. 07543
<binary>          ::=   '0b'{<bin>}8+                                                           # '0b' followed by up to 8 binary digits e.g. 0b01001011
<number>          ::=   {<dec>}+

<hex>             ::=   <dec> | 'a' | 'b' | 'c' | 'd' | 'e' | 'f'
<dec>             ::=   <oct> | '8' | '9'
<oct>             ::=   <bin> | '2' | '3' | '4' | '5' | '6' | '7'
<bin>             ::=   '0' | '1'

<letter>          ::=   'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 
                        'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' |
                        'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' |
                        'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'

